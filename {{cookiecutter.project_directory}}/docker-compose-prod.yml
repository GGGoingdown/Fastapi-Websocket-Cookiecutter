version: "3"
services:
  api:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.prod
    restart: unless-stopped
    depends_on:
      - db
      - cache
      - worker
    ports:
      - ${APPLICATION_PORT:-8000}:8000
    expose:
      - ${APPLICATION_PORT:-8000}
    env_file:
      - ./env/.env.prod
    environment:
      - ENVIRONMENT=PROD
    command: /app/script/service_startup.sh
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8000/health/"
        ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

  worker:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.prod
    restart: unless-stopped
    depends_on:
      - broker
      - cache
    env_file:
      - ./env/.env.prod
    environment:
      - ENVIRONMENT=PROD
    command:
      [
        "celery",
        "-A",
        "app.main.celery",
        "worker",
        "--concurrency=1",
        "--loglevel=error"
      ]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'celery --app app.main.celery inspect ping -d "celery@$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  db:
    image: postgres:13
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    ports:
      - ${POSTGRES_EXPOSE:-5432}:5432
    expose:
      - ${POSTGRES_EXPOSE:-5432}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
  cache:
    image: redis:6.2
    restart: unless-stopped
    ports:
      - ${REDIS_EXPOSE:-6379}:6379
    expose:
      - ${REDIS_EXPOSE:-6379}
    volumes:
      - cache_data:/data
    command: >
      --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  broadcaster:
    image: redis:6.2
    ports:
      - ${BROADCASTER_EXPOSE:-6380}:6379
    expose:
      - ${BROADCASTER_EXPOSE:-6380}
    restart: unless-stopped

  broker:
    image: rabbitmq:3.8-management
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME:-rabbitmq_user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-rabbitmq_user}
    ports:
      - ${RABBITMQ_EXPOSE:-5672}:5672
      - ${RABBITMQ_MANAGEMENT_EXPOSE:-15672}:15672
    expose:
      - ${RABBITMQ_EXPOSE:-5672}
      - ${RABBITMQ_MANAGEMENT_EXPOSE:-15672}
    volumes:
      - broker_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 30s
      timeout: 30s
      retries: 3

volumes:
  cache_data: null
  db_data: null
  broker_data: null
